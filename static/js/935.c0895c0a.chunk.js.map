{"version":3,"file":"static/js/935.c0895c0a.chunk.js","mappings":"sQAGaA,EAAgBC,EAAAA,GAAAA,IAAH,yCAIbC,EAAQD,EAAAA,GAAAA,GAAH,uCACP,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,OAAvB,IAGHC,EAAWN,EAAAA,GAAAA,GAAH,qJAORO,EAAWP,EAAAA,GAAAA,GAAH,4KAKV,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOI,SAAvB,IAOHC,EAAaT,EAAAA,GAAAA,IAAH,8F,qECuBvB,EAvCa,WACX,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeN,GACZO,MAAK,SAAAC,GACJJ,EAAQI,EACT,IACAC,OAAM,SAAAC,IACLC,EAAAA,EAAAA,GAAYD,EAAME,QACnB,GACJ,GAAE,CAACZ,IAIJ,OACE,UAACX,EAAD,YACE,SAACE,EAAD,UAAO,UACP,SAACK,EAAD,UACGO,EAAKU,KAAI,SAAAC,GAAK,OACb,UAACjB,EAAD,YACE,SAACE,EAAD,CACEgB,IACED,EAAME,aAVG,kCAWYF,EAAME,aACvBC,EAENC,IAAKJ,EAAMK,KACXC,OAAQ,OAEV,uBAAIN,EAAMK,SAVGL,EAAMO,GADR,QAiBtB,C,mMCnDYC,EAAU,mC,4BCShB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGAEHC,IAAAA,QAFG,SAGeC,EAAAA,EAAAA,IAAA,mCAAsCH,IAHrD,cAGGI,EAHH,OAIHF,IAAAA,OAJG,kBAKIE,EAAIlB,KAAKmB,SALb,sCAOHH,IAAAA,QACAb,EAAAA,EAAAA,GAAY,wCART,qFAaA,SAAeiB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFAEHL,IAAAA,QAFG,SAGeC,EAAAA,EAAAA,IAAA,+BACQH,EADR,4DACmEO,IAJlF,cAGGH,EAHH,OAMHF,IAAAA,OANG,kBAOIE,EAAIlB,KAAKmB,SAPb,sCASHH,IAAAA,QACAb,EAAAA,EAAAA,GAAY,wCAVT,qFAeA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAAiC9B,GAAjC,uFAEHwB,IAAAA,QAFG,SAGeC,EAAAA,EAAAA,IAAA,gBACPzB,EADO,oBACYsB,EADZ,4CAHf,cAGGI,EAHH,OAMHF,IAAAA,OANG,kBAOIE,EAAIlB,MAPR,sCASHgB,IAAAA,QACAb,EAAAA,EAAAA,GAAY,uCAVT,qFAeA,SAAeL,EAAtB,+CAAO,OAAP,oBAAO,WAA8BN,GAA9B,uFAEHwB,IAAAA,QAFG,SAGeC,EAAAA,EAAAA,IAAA,gBACPzB,EADO,4BACoBsB,EADpB,oBAHf,cAGGI,EAHH,OAMHF,IAAAA,OANG,kBAOIE,EAAIlB,KAAKL,MAPb,sCASHqB,IAAAA,QACAb,EAAAA,EAAAA,GAAY,oCAVT,qFAeA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAAgC/B,GAAhC,uFAEHwB,IAAAA,QAFG,SAGeC,EAAAA,EAAAA,IAAA,gBACPzB,EADO,4BACoBsB,EADpB,oBAHf,cAGGI,EAHH,OAMHF,IAAAA,OANG,kBAOIE,EAAIlB,KAAKmB,SAPb,sCASHH,IAAAA,QACAb,EAAAA,EAAAA,GAAY,uCAVT,qFA5DPc,EAAAA,EAAAA,SAAAA,QAAyB,+B,8CCKzB,IAToB,SAAAb,GAClBoB,IAAAA,KAAU,CACRC,KAAM,UACNC,MAAO,UACPC,KAAMvB,EACNwB,MAAO,KAEV,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","utils/constants.js","utils/api.js","utils/swalConfig.js"],"sourcesContent":["// src/components/Cast/Cast.styled.jsx\nimport styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  padding: 1em;\n`;\n\nexport const Title = styled.h2`\n  color: ${props => props.theme.colors.primary};\n`;\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 100px));\n  grid-gap: 50px;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  color: ${props => props.theme.colors.secondary};\n\n  p {\n    margin-bottom: 0.5em;\n  }\n`;\n\nexport const ActorImage = styled.img`\n  /* max-width: 50%; */\n  object-fit: cover;\n  border-radius: 5px;\n`;\n","// src/components/Cast/Cast.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastMovie } from 'utils/api';\nimport showMessage from 'utils/swalConfig';\nimport {\n  CastContainer,\n  Title,\n  CastList,\n  CastItem,\n  ActorImage,\n} from './Cast.styled';\nimport AvatarImage from '../../images/missing-actor.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchCastMovie(movieId)\n      .then(data => {\n        setCast(data);\n      })\n      .catch(error => {\n        showMessage(error.message);\n      });\n  }, [movieId]);\n\n  const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <CastContainer>\n      <Title>Cast</Title>\n      <CastList>\n        {cast.map(actor => (\n          <CastItem key={actor.id}>\n            <ActorImage\n              src={\n                actor.profile_path\n                  ? IMAGE_BASE_URL + actor.profile_path\n                  : AvatarImage\n              }\n              alt={actor.name}\n              height={160}\n            />\n            <p>{actor.name}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n","export const API_KEY = '5ba3a910e660e35337f3e89e0f4cf206';\n","// src/utils/api.js\n\nimport axios from 'axios';\nimport { API_KEY } from './constants.js';\nimport showMessage from './swalConfig.js';\nimport NProgress from 'nprogress';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrendMovies() {\n  try {\n    NProgress.start();\n    const res = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n    NProgress.done();\n    return res.data.results;\n  } catch (error) {\n    NProgress.done();\n    showMessage('Error while loading trending movies.');\n    throw error;\n  }\n}\n\nexport async function fetchQueryMovies(query) {\n  try {\n    NProgress.start();\n    const res = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n    );\n    NProgress.done();\n    return res.data.results;\n  } catch (error) {\n    NProgress.done();\n    showMessage('Error while fetching movie by query.');\n    throw error;\n  }\n}\n\nexport async function fetchDetailsMovie(movieId) {\n  try {\n    NProgress.start();\n    const res = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US&external_source=imdb_id`\n    );\n    NProgress.done();\n    return res.data;\n  } catch (error) {\n    NProgress.done();\n    showMessage('Error while fetching movie details.');\n    throw error;\n  }\n}\n\nexport async function fetchCastMovie(movieId) {\n  try {\n    NProgress.start();\n    const res = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    NProgress.done();\n    return res.data.cast;\n  } catch (error) {\n    NProgress.done();\n    showMessage('Error while fetching movie cast.');\n    throw error;\n  }\n}\n\nexport async function fetchReviewMovie(movieId) {\n  try {\n    NProgress.start();\n    const res = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    NProgress.done();\n    return res.data.results;\n  } catch (error) {\n    NProgress.done();\n    showMessage('Error while fetching movie reviews.');\n    throw error;\n  }\n}\n","// src/utils/swalConfig.js\nimport Swal from 'sweetalert2';\n\nconst showMessage = message => {\n  Swal.fire({\n    icon: 'warning',\n    title: 'Oops...',\n    text: message,\n    timer: 3000,\n  });\n};\n\nexport default showMessage;\n"],"names":["CastContainer","styled","Title","props","theme","colors","primary","CastList","CastItem","secondary","ActorImage","movieId","useParams","useState","cast","setCast","useEffect","fetchCastMovie","then","data","catch","error","showMessage","message","map","actor","src","profile_path","AvatarImage","alt","name","height","id","API_KEY","fetchTrendMovies","NProgress","axios","res","results","fetchQueryMovies","query","fetchDetailsMovie","fetchReviewMovie","Swal","icon","title","text","timer"],"sourceRoot":""}